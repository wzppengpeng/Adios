// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: adios.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol/adios.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace adios_proto {

namespace {

const ::google::protobuf::Descriptor* Task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Task_reflection_ = NULL;
const ::google::protobuf::Descriptor* Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Result_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MasterTaskType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SlaveMessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_adios_2eproto() {
  protobuf_AddDesc_adios_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "adios.proto");
  GOOGLE_CHECK(file != NULL);
  Task_descriptor_ = file->message_type(0);
  static const int Task_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, master_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, master_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, task_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, node_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, task_queue_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, task_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, check_info_),
  };
  Task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Task_descriptor_,
      Task::default_instance_,
      Task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Task));
  Result_descriptor_ = file->message_type(1);
  static const int Result_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, slave_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, slave_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, answer_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, client_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, task_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, answer_info_),
  };
  Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Result_descriptor_,
      Result::default_instance_,
      Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Result));
  MasterTaskType_descriptor_ = file->enum_type(0);
  SlaveMessageType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_adios_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Task_descriptor_, &Task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Result_descriptor_, &Result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_adios_2eproto() {
  delete Task::default_instance_;
  delete Task_reflection_;
  delete Result::default_instance_;
  delete Result_reflection_;
}

void protobuf_AddDesc_adios_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013adios.proto\022\013adios_proto\"\302\001\n\004Task\022\021\n\tm"
    "aster_ip\030\001 \002(\t\022\023\n\013master_port\030\002 \002(\005\022.\n\tt"
    "ask_type\030\003 \002(\0162\033.adios_proto.MasterTaskT"
    "ype\022\021\n\tnode_name\030\004 \001(\t\022\027\n\017task_queue_nam"
    "e\030\005 \001(\t\022\017\n\007task_id\030\006 \001(\003\022\021\n\ttask_name\030\007 "
    "\001(\t\022\022\n\ncheck_info\030\010 \001(\005\"\261\001\n\006Result\022\020\n\010sl"
    "ave_ip\030\001 \002(\t\022\022\n\nslave_port\030\002 \002(\005\0222\n\013answ"
    "er_type\030\003 \002(\0162\035.adios_proto.SlaveMessage"
    "Type\022\022\n\nclient_cmd\030\004 \001(\t\022\017\n\007task_id\030\005 \001("
    "\003\022\023\n\013task_result\030\006 \001(\t\022\023\n\013answer_info\030\007 "
    "\001(\005*A\n\016MasterTaskType\022\016\n\nMANAGENODE\020\001\022\014\n"
    "\010DELEVERY\020\002\022\007\n\003ASK\020\003\022\010\n\004PING\020\004**\n\020SlaveM"
    "essageType\022\n\n\006UPLOAD\020\001\022\n\n\006ANSWER\020\002", 514);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "adios.proto", &protobuf_RegisterTypes);
  Task::default_instance_ = new Task();
  Result::default_instance_ = new Result();
  Task::default_instance_->InitAsDefaultInstance();
  Result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_adios_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_adios_2eproto {
  StaticDescriptorInitializer_adios_2eproto() {
    protobuf_AddDesc_adios_2eproto();
  }
} static_descriptor_initializer_adios_2eproto_;
const ::google::protobuf::EnumDescriptor* MasterTaskType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterTaskType_descriptor_;
}
bool MasterTaskType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SlaveMessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlaveMessageType_descriptor_;
}
bool SlaveMessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Task::kMasterIpFieldNumber;
const int Task::kMasterPortFieldNumber;
const int Task::kTaskTypeFieldNumber;
const int Task::kNodeNameFieldNumber;
const int Task::kTaskQueueNameFieldNumber;
const int Task::kTaskIdFieldNumber;
const int Task::kTaskNameFieldNumber;
const int Task::kCheckInfoFieldNumber;
#endif  // !_MSC_VER

Task::Task()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:adios_proto.Task)
}

void Task::InitAsDefaultInstance() {
}

Task::Task(const Task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:adios_proto.Task)
}

void Task::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  master_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  master_port_ = 0;
  task_type_ = 1;
  node_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_queue_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_id_ = GOOGLE_LONGLONG(0);
  task_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  check_info_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:adios_proto.Task)
  SharedDtor();
}

void Task::SharedDtor() {
  if (master_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete master_ip_;
  }
  if (node_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete node_name_;
  }
  if (task_queue_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_queue_name_;
  }
  if (task_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_name_;
  }
  if (this != default_instance_) {
  }
}

void Task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_descriptor_;
}

const Task& Task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adios_2eproto();
  return *default_instance_;
}

Task* Task::default_instance_ = NULL;

Task* Task::New() const {
  return new Task;
}

void Task::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_master_ip()) {
      if (master_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        master_ip_->clear();
      }
    }
    master_port_ = 0;
    task_type_ = 1;
    if (has_node_name()) {
      if (node_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        node_name_->clear();
      }
    }
    if (has_task_queue_name()) {
      if (task_queue_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        task_queue_name_->clear();
      }
    }
    task_id_ = GOOGLE_LONGLONG(0);
    if (has_task_name()) {
      if (task_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        task_name_->clear();
      }
    }
    check_info_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adios_proto.Task)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string master_ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->master_ip().data(), this->master_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "master_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_master_port;
        break;
      }

      // required int32 master_port = 2;
      case 2: {
        if (tag == 16) {
         parse_master_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &master_port_)));
          set_has_master_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_task_type;
        break;
      }

      // required .adios_proto.MasterTaskType task_type = 3;
      case 3: {
        if (tag == 24) {
         parse_task_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::adios_proto::MasterTaskType_IsValid(value)) {
            set_task_type(static_cast< ::adios_proto::MasterTaskType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_node_name;
        break;
      }

      // optional string node_name = 4;
      case 4: {
        if (tag == 34) {
         parse_node_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->node_name().data(), this->node_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "node_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_task_queue_name;
        break;
      }

      // optional string task_queue_name = 5;
      case 5: {
        if (tag == 42) {
         parse_task_queue_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_queue_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->task_queue_name().data(), this->task_queue_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "task_queue_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_task_id;
        break;
      }

      // optional int64 task_id = 6;
      case 6: {
        if (tag == 48) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_task_name;
        break;
      }

      // optional string task_name = 7;
      case 7: {
        if (tag == 58) {
         parse_task_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->task_name().data(), this->task_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "task_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_check_info;
        break;
      }

      // optional int32 check_info = 8;
      case 8: {
        if (tag == 64) {
         parse_check_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &check_info_)));
          set_has_check_info();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adios_proto.Task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adios_proto.Task)
  return false;
#undef DO_
}

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adios_proto.Task)
  // required string master_ip = 1;
  if (has_master_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_ip().data(), this->master_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "master_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->master_ip(), output);
  }

  // required int32 master_port = 2;
  if (has_master_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->master_port(), output);
  }

  // required .adios_proto.MasterTaskType task_type = 3;
  if (has_task_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->task_type(), output);
  }

  // optional string node_name = 4;
  if (has_node_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_name().data(), this->node_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->node_name(), output);
  }

  // optional string task_queue_name = 5;
  if (has_task_queue_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_queue_name().data(), this->task_queue_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_queue_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->task_queue_name(), output);
  }

  // optional int64 task_id = 6;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->task_id(), output);
  }

  // optional string task_name = 7;
  if (has_task_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_name().data(), this->task_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->task_name(), output);
  }

  // optional int32 check_info = 8;
  if (has_check_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->check_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:adios_proto.Task)
}

::google::protobuf::uint8* Task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:adios_proto.Task)
  // required string master_ip = 1;
  if (has_master_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_ip().data(), this->master_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "master_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->master_ip(), target);
  }

  // required int32 master_port = 2;
  if (has_master_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->master_port(), target);
  }

  // required .adios_proto.MasterTaskType task_type = 3;
  if (has_task_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->task_type(), target);
  }

  // optional string node_name = 4;
  if (has_node_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_name().data(), this->node_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->node_name(), target);
  }

  // optional string task_queue_name = 5;
  if (has_task_queue_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_queue_name().data(), this->task_queue_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_queue_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->task_queue_name(), target);
  }

  // optional int64 task_id = 6;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->task_id(), target);
  }

  // optional string task_name = 7;
  if (has_task_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_name().data(), this->task_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->task_name(), target);
  }

  // optional int32 check_info = 8;
  if (has_check_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->check_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adios_proto.Task)
  return target;
}

int Task::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string master_ip = 1;
    if (has_master_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master_ip());
    }

    // required int32 master_port = 2;
    if (has_master_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->master_port());
    }

    // required .adios_proto.MasterTaskType task_type = 3;
    if (has_task_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->task_type());
    }

    // optional string node_name = 4;
    if (has_node_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_name());
    }

    // optional string task_queue_name = 5;
    if (has_task_queue_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_queue_name());
    }

    // optional int64 task_id = 6;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->task_id());
    }

    // optional string task_name = 7;
    if (has_task_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_name());
    }

    // optional int32 check_info = 8;
    if (has_check_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->check_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_master_ip()) {
      set_master_ip(from.master_ip());
    }
    if (from.has_master_port()) {
      set_master_port(from.master_port());
    }
    if (from.has_task_type()) {
      set_task_type(from.task_type());
    }
    if (from.has_node_name()) {
      set_node_name(from.node_name());
    }
    if (from.has_task_queue_name()) {
      set_task_queue_name(from.task_queue_name());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_task_name()) {
      set_task_name(from.task_name());
    }
    if (from.has_check_info()) {
      set_check_info(from.check_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Task::Swap(Task* other) {
  if (other != this) {
    std::swap(master_ip_, other->master_ip_);
    std::swap(master_port_, other->master_port_);
    std::swap(task_type_, other->task_type_);
    std::swap(node_name_, other->node_name_);
    std::swap(task_queue_name_, other->task_queue_name_);
    std::swap(task_id_, other->task_id_);
    std::swap(task_name_, other->task_name_);
    std::swap(check_info_, other->check_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Task_descriptor_;
  metadata.reflection = Task_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Result::kSlaveIpFieldNumber;
const int Result::kSlavePortFieldNumber;
const int Result::kAnswerTypeFieldNumber;
const int Result::kClientCmdFieldNumber;
const int Result::kTaskIdFieldNumber;
const int Result::kTaskResultFieldNumber;
const int Result::kAnswerInfoFieldNumber;
#endif  // !_MSC_VER

Result::Result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:adios_proto.Result)
}

void Result::InitAsDefaultInstance() {
}

Result::Result(const Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:adios_proto.Result)
}

void Result::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  slave_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slave_port_ = 0;
  answer_type_ = 1;
  client_cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_id_ = GOOGLE_LONGLONG(0);
  task_result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  answer_info_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:adios_proto.Result)
  SharedDtor();
}

void Result::SharedDtor() {
  if (slave_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete slave_ip_;
  }
  if (client_cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_cmd_;
  }
  if (task_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_result_;
  }
  if (this != default_instance_) {
  }
}

void Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_descriptor_;
}

const Result& Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adios_2eproto();
  return *default_instance_;
}

Result* Result::default_instance_ = NULL;

Result* Result::New() const {
  return new Result;
}

void Result::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_slave_ip()) {
      if (slave_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        slave_ip_->clear();
      }
    }
    slave_port_ = 0;
    answer_type_ = 1;
    if (has_client_cmd()) {
      if (client_cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_cmd_->clear();
      }
    }
    task_id_ = GOOGLE_LONGLONG(0);
    if (has_task_result()) {
      if (task_result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        task_result_->clear();
      }
    }
    answer_info_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:adios_proto.Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string slave_ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slave_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->slave_ip().data(), this->slave_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "slave_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slave_port;
        break;
      }

      // required int32 slave_port = 2;
      case 2: {
        if (tag == 16) {
         parse_slave_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slave_port_)));
          set_has_slave_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_answer_type;
        break;
      }

      // required .adios_proto.SlaveMessageType answer_type = 3;
      case 3: {
        if (tag == 24) {
         parse_answer_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::adios_proto::SlaveMessageType_IsValid(value)) {
            set_answer_type(static_cast< ::adios_proto::SlaveMessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_client_cmd;
        break;
      }

      // optional string client_cmd = 4;
      case 4: {
        if (tag == 34) {
         parse_client_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_cmd().data(), this->client_cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_cmd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_task_id;
        break;
      }

      // optional int64 task_id = 5;
      case 5: {
        if (tag == 40) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_task_result;
        break;
      }

      // optional string task_result = 6;
      case 6: {
        if (tag == 50) {
         parse_task_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_result()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->task_result().data(), this->task_result().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "task_result");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_answer_info;
        break;
      }

      // optional int32 answer_info = 7;
      case 7: {
        if (tag == 56) {
         parse_answer_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &answer_info_)));
          set_has_answer_info();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adios_proto.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adios_proto.Result)
  return false;
#undef DO_
}

void Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adios_proto.Result)
  // required string slave_ip = 1;
  if (has_slave_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slave_ip().data(), this->slave_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "slave_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->slave_ip(), output);
  }

  // required int32 slave_port = 2;
  if (has_slave_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slave_port(), output);
  }

  // required .adios_proto.SlaveMessageType answer_type = 3;
  if (has_answer_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->answer_type(), output);
  }

  // optional string client_cmd = 4;
  if (has_client_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_cmd().data(), this->client_cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->client_cmd(), output);
  }

  // optional int64 task_id = 5;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->task_id(), output);
  }

  // optional string task_result = 6;
  if (has_task_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_result().data(), this->task_result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->task_result(), output);
  }

  // optional int32 answer_info = 7;
  if (has_answer_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->answer_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:adios_proto.Result)
}

::google::protobuf::uint8* Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:adios_proto.Result)
  // required string slave_ip = 1;
  if (has_slave_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slave_ip().data(), this->slave_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "slave_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->slave_ip(), target);
  }

  // required int32 slave_port = 2;
  if (has_slave_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slave_port(), target);
  }

  // required .adios_proto.SlaveMessageType answer_type = 3;
  if (has_answer_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->answer_type(), target);
  }

  // optional string client_cmd = 4;
  if (has_client_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_cmd().data(), this->client_cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->client_cmd(), target);
  }

  // optional int64 task_id = 5;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->task_id(), target);
  }

  // optional string task_result = 6;
  if (has_task_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_result().data(), this->task_result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "task_result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->task_result(), target);
  }

  // optional int32 answer_info = 7;
  if (has_answer_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->answer_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adios_proto.Result)
  return target;
}

int Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string slave_ip = 1;
    if (has_slave_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slave_ip());
    }

    // required int32 slave_port = 2;
    if (has_slave_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slave_port());
    }

    // required .adios_proto.SlaveMessageType answer_type = 3;
    if (has_answer_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->answer_type());
    }

    // optional string client_cmd = 4;
    if (has_client_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_cmd());
    }

    // optional int64 task_id = 5;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->task_id());
    }

    // optional string task_result = 6;
    if (has_task_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_result());
    }

    // optional int32 answer_info = 7;
    if (has_answer_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->answer_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slave_ip()) {
      set_slave_ip(from.slave_ip());
    }
    if (from.has_slave_port()) {
      set_slave_port(from.slave_port());
    }
    if (from.has_answer_type()) {
      set_answer_type(from.answer_type());
    }
    if (from.has_client_cmd()) {
      set_client_cmd(from.client_cmd());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_task_result()) {
      set_task_result(from.task_result());
    }
    if (from.has_answer_info()) {
      set_answer_info(from.answer_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Result::Swap(Result* other) {
  if (other != this) {
    std::swap(slave_ip_, other->slave_ip_);
    std::swap(slave_port_, other->slave_port_);
    std::swap(answer_type_, other->answer_type_);
    std::swap(client_cmd_, other->client_cmd_);
    std::swap(task_id_, other->task_id_);
    std::swap(task_result_, other->task_result_);
    std::swap(answer_info_, other->answer_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Result_descriptor_;
  metadata.reflection = Result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace adios_proto

// @@protoc_insertion_point(global_scope)
